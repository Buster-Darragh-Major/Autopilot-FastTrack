# This is a best practice Flyway Enterprise workflow to help you get started with Azure DevOps and a Linux Runner

name: Flyway-AutoPilot-Simple-Pipeline-Linux

trigger: none
#   branches:
#     include:
#       - release
#   paths:
#     include:
#       - migrations/*

pool:
  name: "default" # To be set when a self-hosted agent pool is to be used alongside this pipeline
  #vmImage: "" # To be used when a microsoft-hosted agent is used alongside this pipeline (Such as ubuntu-latest/windows-latest)

variables:

  # This is the relative path to the migrations folder in your project, such as:
  # $(System.DefaultWorkingDirectory)\project
  # The default is to have the migrations folder in the same directory as the yml file
  WORKING_DIRECTORY: $(System.DefaultWorkingDirectory)
  system.debug: 'false' # Set this to true to enable verbose logging on your pipeline run
  
  # Task #1 - For added security, create a Library Variable Group to house secure pipeline variables (Click Pipelines --> Library --> + Variable Group)
  group: "AutoPilot_Global" # FLYWAY_EMAIL/FLYWAY_TOKEN/FLYWAY_LICENSE_KEY (Personal Access Keys are the recommended license authentication method - https://documentation.red-gate.com/fd/tutorial-personal-access-tokens-243271547.html)
  
  # License Authentication - Place value in above Library Group for security, or plaintext below for simplicity #
  #FLYWAY_EMAIL: "" # Enter the email address linked to the Redgate Account that created the PAT
  # PAT's should always be treated as secure. Therefore, we recommend creating a secure variable called FLYWAY_TOKEN_SECURE. To use a secret in ADO, this needs to be mapped as an environment variable for each section
  #FLYWAY_TOKEN: "" # Enter the PAT Value (This should be treated like a password and thus as a secure variable. Consider using a Library Group or Secure Variable for this value)

  #FLYWAY_LICENSE_KEY: "" # Deprecated Authentication Method. Consider using the new PAT method for added security.

  BASELINE_VERSION: "001" # This should match the version number of your baseline script
  FIRST_UNDO_SCRIPT: "002" # This should match the first undo version in your project

  # Optional - For ephemeral agents/runners, it's necessary to validate Flyway is installed on each run. Set the below to true to enable the functionality
  FLYWAY_CLI_INSTALL_CHECK: "false" # Setting to false will skip the Flyway CLI check step
  FLYWAY_VERSION: "10.21.0" # This outlines the version of Flyway CLI that will be downloaded if no Flyway CLI is detected on the target agent
  FLYWAY_INSTALL_DIRECTORY: "" # The path on the agent machine where Flyway CLI will be installed

  # Optional: Side Task #1 - Setup Flyway Pipeline Integration - https://flyway.red-gate.com/ For More Details
  FLYWAY_PUBLISH_RESULT: "false" # Set this value to true to enable Flyway Pipelines and track your releases centrally!

stages:
  - stage: Build # Tip - The build stage is a great way of gaining quick early feedback about upcoming releases. It simply needs to point to an empty database to function.
    displayName: Build Stage 
    jobs:
    - job: Build
      variables: # Tip - For sensitive variables, store these in a Library Variable Group and reference the name below (Click Pipelines --> Library --> + Variable Group)
        # Variables Expected - FLYWAY_EMAIL/FLYWAY_TOKEN/FLYWAY_LICENSE_KEY (Use either PAT or License Key method for License Authentication)
      - group: "AutoPilot_Global"
        # Variables Expected - DATABASE_NAME/TARGET_ENVIRONMENT/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/EXECUTE_BUILD
      - group: "AutoPilot_Build"
        # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure in either Variable Groups (See above) or Secure Variables (Click 'Variables' in top right corner of pipeline editor)
      # - name: DATABASE_NAME
      #   value: "WidgetZBuild"
      #   # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      # - name: TARGET_ENVIRONMENT
      #   value: "Build"
      #   # Optional - If SQL Authentication is used, provide the relevant database username. Otherwise, leave next two values blank
      # - name: TARGET_DATABASE_USERNAME
      #   value: "MyUsername"
      # - name: TARGET_DATABASE_PASSWORD
      #   value: "MyPassword"
      #   # Turn to false to skip the build stage tasks
      # - name: EXECUTE_BUILD
      #   value: "true"

      steps:
        # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - script: |
            if flyway --help ; then
              echo "Flyway Installed and Available"
            else 
              echo "Flyway Not Installed - Downloading and Configuring Now"
              wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-$FLYWAY_VERSION/flyway /usr/local/bin 
              echo "Flyway Downloaded - Setting PATH"
              export PATH="/usr/local/bin/flyway-$FLYWAY_VERSION/:$PATH"
              echo "Validation Step - Checking if Flyway can run"
              flyway --version
            fi
          displayName: 'Flyway CLI - Install Check'
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
        # Step 1 - Ensure the Build Database is cleaned of all objects, meaning the build starts from scratch
        - script: |
            flyway info clean info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" "-plugins.clean.mode=all" -errorOverrides=S0001:0:I- -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(WORKING_DIRECTORY)/flyway.toml" -locations="filesystem:$(WORKING_DIRECTORY)/migrations"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Clean Build DB'
          condition: eq(variables['EXECUTE_BUILD'], true)
          env:
            FLYWAY_CLEAN_DISABLED: false # This should only be disabled for temporary sandbox databases, like Build

        # Step 2 - Migrate all scripts from the migration folder, to verify they can be deployed against an empty database. This is the quickest way to get feedback about problematic scripts
        - script: |
            flyway info migrate info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" "-plugins.clean.mode=all" -errorOverrides=S0001:0:I- -baselineOnMigrate=true -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(WORKING_DIRECTORY)/flyway.toml" -locations="filesystem:$(WORKING_DIRECTORY)/migrations"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: eq(variables['EXECUTE_BUILD'], true)
          displayName: 'Validate Migrate Scripts'
          env:
            EXAMPLE_VARIABLE: MyValue

        - script: |
            flyway info undo info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -errorOverrides=S0001:0:I- -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(WORKING_DIRECTORY)/flyway.toml" -locations="filesystem:$(WORKING_DIRECTORY)/migrations" -target="$(FIRST_UNDO_SCRIPT)"
          continueOnError: true
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: eq(variables['EXECUTE_BUILD'], true)
          displayName: 'Validate Undo Scripts'
          env:
            EXAMPLE_VARIABLE: MyValue

        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(WORKING_DIRECTORY)'
            Contents: |
              !flyway-*/**/*
              !.git/**/*
              !.git*/**/*
              **/schema-model/**/*
              **/migrations/**/*
              **/backups/**/*
              **/flyway.toml
              **/Filter.scpf
            TargetFolder: '$(System.ArtifactsDirectory)'

        - task: PublishBuildArtifacts@1 # This step publishes all the validated Flyway Project files as a build artifact
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: 'Flyway-CI-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)'

  - stage: Test
    displayName: Test Stage
    dependsOn: Build
    variables: # Tip - For sensitive variables, store these in a Library Variable Group and reference the name below (Click Pipelines --> Library --> + Variable Group)
        # Variables Expected - FLYWAY_EMAIL/FLYWAY_TOKEN/FLYWAY_LICENSE_KEY (Use either PAT or License Key method for License Authentication)
      - group: "AutoPilot_Global"
        # Variables Expected - DATABASE_NAME/TARGET_ENVIRONMENT/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/REPORT_ENVIRONMENT/REPORT_DATABASE_USERNAME/REPORT_DATABASE_PASSWORD/pauseForCodeReview/generateReport
      - group: "AutoPilot_Test"
        # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure in either Variable Groups (See above) or Secure Variables (Click 'Variables' in top right corner of pipeline editor)
      # - name: DATABASE_NAME
      #   value: "WidgetTest"
      #   # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      # - name: TARGET_ENVIRONMENT
      #   value: "Test"
      #   # Optional - If SQL Authentication is used, provide the relevant database username. Otherwise, leave next two values blank
      # - name: TARGET_DATABASE_USERNAME
      #   value: "MyUsername"
      # - name: TARGET_DATABASE_PASSWORD
      #   value: "MyPassword"
      #   # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      # - name: REPORT_ENVIRONMENT
      #   value: "Check"
      #   # Optional - If SQL Authentication is used, provide the relevant database username. Otherwise, leave next two values blank
      # - name: REPORT_DATABASE_USERNAME
      #   value: "MyUsername"
      # - name: REPORT_DATABASE_PASSWORD
      #   value: "MyPassword"
      #   # Turn to false to skip the build stage tasks
      # - name: pauseForCodeReview
      #   value: "false"
      # - name: generateReport
      #   value: "true"
    jobs:
    - job: ChangeReport
      displayName: "Flyway - Pre Release Change Report"
      condition: 
      variables:
        EXAMPLE: ""
      #- group: ${{stage.variableGroupName}}
      #- group: pipeline_flyway_vars
      steps:
        # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - script: |
             if flyway --help ; then
              echo "Flyway Installed and Available"
             else 
              echo "Flyway Not Installed - Downloading and Configuring Now"
              wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-$FLYWAY_VERSION/flyway /usr/local/bin 
              echo "Flyway Downloaded - Setting PATH"
              export PATH="/usr/local/bin/flyway-$FLYWAY_VERSION/:$PATH"
              echo "Validation Step - Checking if Flyway can run"
              flyway --version
             fi
          displayName: 'Flyway CLI - Install Check'
          condition: and(eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true), eq(variables['generateReport'], true))
        
        - task: DownloadBuildArtifacts@0
          condition: eq(variables['generateReport'], true)
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        
        - script: |
              flyway check -dryrun -changes -drift info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -check.buildEnvironment="$(REPORT_ENVIRONMENT)" -environments.$(REPORT_ENVIRONMENT).user="$(REPORT_DATABASE_USERNAME)" -environments.$(REPORT_ENVIRONMENT).password="$(REPORT_DATABASE_PASSWORD)" -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" "-reportEnabled=true" "-reportFilename=$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html" -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: eq(variables['generateReport'], true)
          continueOnError: false
          displayName: 'Flyway Check Report'
        
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Check Report'
          condition: eq(variables['generateReport'], true)
          inputs:
            ArtifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html'
        
        # - task: JakubRumpca.azure-pipelines-html-report.PublishHtmlReport.PublishHtmlReport@1 #This is an optional task that can make viewing the Check report much easier in each run. Disable if required.
        #   displayName: 'Publish HTML Report'
        #   inputs:
        #     reportDir: '$(System.ArtifactsDirectory)\Flyway-CI-$(Build.BuildId)\reports\$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html'

    - job: CodeReview
      displayName: Code Review
      dependsOn: ChangeReport
      pool: server
      steps:
        - task: ManualValidation@0
          condition: eq(variables['pauseForCodeReview'], true)
          displayName: 'Review Change Report Prior To Release'
          timeoutInMinutes: 4320 
          inputs:
            notifyUsers: |
              user@email.com
              example@example.com
            instructions: 'Review changes'
        
    - job: Deploy
      displayName: "Deploy"
      dependsOn: CodeReview
      variables:
        EXAMPLE: ""
      steps:
          # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - script: |
             if flyway --help ; then
              echo "Flyway Installed and Available"
             else 
              echo "Flyway Not Installed - Downloading and Configuring Now"
              wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-$FLYWAY_VERSION/flyway /usr/local/bin 
              echo "Flyway Downloaded - Setting PATH"
              export PATH="/usr/local/bin/flyway-$FLYWAY_VERSION/:$PATH"
              echo "Validation Step - Checking if Flyway can run"
              flyway --version
             fi
          displayName: 'Flyway CLI - Install Check'
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        - script: |
            flyway info migrate info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -errorOverrides=S0001:0:I- -baselineOnMigrate=true -baselineVersion="$(BASELINE_VERSION)" -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" -publishResult="$(FLYWAY_PUBLISH_RESULT)" -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Migrate Test DB'
          condition:
  
  - stage: Prod
    displayName: Prod Stage
    dependsOn: Test
    variables: # Tip - For sensitive variables, store these in a Library Variable Group and reference the name below (Click Pipelines --> Library --> + Variable Group)
        # Variables Expected - FLYWAY_EMAIL/FLYWAY_TOKEN/FLYWAY_LICENSE_KEY (Use either PAT or License Key method for License Authentication)
      - group: "AutoPilot_Global"
        # Variables Expected - DATABASE_NAME/TARGET_ENVIRONMENT/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/REPORT_ENVIRONMENT/REPORT_DATABASE_USERNAME/REPORT_DATABASE_PASSWORD/pauseForCodeReview/generateReport
      - group: "AutoPilot_Prod"
        # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure in either Variable Groups (See above) or Secure Variables (Click 'Variables' in top right corner of pipeline editor)
      # - name: DATABASE_NAME
      #   value: "WidgetTest"
      #   # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      # - name: TARGET_ENVIRONMENT
      #   value: "Test"
      #   # Optional - If SQL Authentication is used, provide the relevant database username. Otherwise, leave next two values blank
      # - name: TARGET_DATABASE_USERNAME
      #   value: "MyUsername"
      # - name: TARGET_DATABASE_PASSWORD
      #   value: "MyPassword"
      #   # This variable refers to the environment name present in the Flyway Projects TOML file. Use Flyway Desktop to check and change this value if required.
      # - name: REPORT_ENVIRONMENT
      #   value: "Check"
      #   # Optional - If SQL Authentication is used, provide the relevant database username. Otherwise, leave next two values blank
      # - name: REPORT_DATABASE_USERNAME
      #   value: "MyUsername"
      # - name: REPORT_DATABASE_PASSWORD
      #   value: "MyPassword"
      #   # Turn to false to skip the build stage tasks
      # - name: pauseForCodeReview
      #   value: "false"
      # - name: generateReport
      #   value: "true"

    jobs:
    - job: ChangeReport
      displayName: "Flyway - Pre Release Change Report"
      condition:
      variables:
        EXAMPLE: ""
      #- group: ${{stage.variableGroupName}}
      #- group: pipeline_flyway_vars
      steps:
        # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - script: |
             if flyway --help ; then
              echo "Flyway Installed and Available"
             else 
              echo "Flyway Not Installed - Downloading and Configuring Now"
              wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-$FLYWAY_VERSION/flyway /usr/local/bin 
              echo "Flyway Downloaded - Setting PATH"
              export PATH="/usr/local/bin/flyway-$FLYWAY_VERSION/:$PATH"
              echo "Validation Step - Checking if Flyway can run"
              flyway --version
             fi
          displayName: 'Flyway CLI - Install Check'
          condition: and(eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true), eq(variables['generateReport'], true))
        - task: DownloadBuildArtifacts@0
          condition: eq(variables['generateReport'], true)
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        
        - script: |
              flyway check -dryrun -changes -drift info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -check.buildEnvironment="$(REPORT_ENVIRONMENT)" -environments.$(REPORT_ENVIRONMENT).user="$(REPORT_DATABASE_USERNAME)" -environments.$(REPORT_ENVIRONMENT).password="$(REPORT_DATABASE_PASSWORD)" -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" "-reportEnabled=true" "-reportFilename=$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html" -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: eq(variables['generateReport'], true)
          continueOnError: false
          displayName: 'Flyway Check Report'
        
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Check Report'
          condition: eq(variables['generateReport'], true)
          inputs:
            ArtifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html'
        
        # - task: JakubRumpca.azure-pipelines-html-report.PublishHtmlReport.PublishHtmlReport@1 #This is an optional task that can make viewing the Check report much easier in each run. Disable if required.
        #   displayName: 'Publish HTML Report'
        #   inputs:
        #     reportDir: '$(System.ArtifactsDirectory)\Flyway-CI-$(Build.BuildId)\reports\$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html'

    - job: CodeReview
      displayName: Code Review
      dependsOn: ChangeReport
      pool: server
      steps:
        - task: ManualValidation@0
          displayName: 'Review Change Report Prior To Release'
          condition: eq(variables['pauseForCodeReview'], true)
          timeoutInMinutes: 4320
          inputs:
            notifyUsers: |
              user@email.com
              example@example.com
            instructions: 'Review changes'
        
    - job: Deploy
      displayName: "Deploy"
      dependsOn: CodeReview
      variables:
        EXAMPLE: ""
      steps:
          # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - script: |
             if flyway --help ; then
              echo "Flyway Installed and Available"
             else 
              echo "Flyway Not Installed - Downloading and Configuring Now"
              wget -qO- https://download.red-gate.com/maven/release/com/redgate/flyway/flyway-commandline/$FLYWAY_VERSION/flyway-commandline-$FLYWAY_VERSION-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-$FLYWAY_VERSION/flyway /usr/local/bin 
              echo "Flyway Downloaded - Setting PATH"
              export PATH="/usr/local/bin/flyway-$FLYWAY_VERSION/:$PATH"
              echo "Validation Step - Checking if Flyway can run"
              flyway --version
             fi
          displayName: 'Flyway CLI - Install Check'
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        - script: |
            flyway info migrate info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -errorOverrides=S0001:0:I- -baselineOnMigrate=true -baselineVersion="$(BASELINE_VERSION)" -licenseKey="$(FLYWAY_LICENSE_KEY)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" -publishResult="$(FLYWAY_PUBLISH_RESULT)" -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Migrate Prod DB'
          condition:
